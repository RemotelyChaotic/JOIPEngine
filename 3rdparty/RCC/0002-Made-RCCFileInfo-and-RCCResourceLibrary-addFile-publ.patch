From edad34cff35aba73454b1e25812fb868e670d422 Mon Sep 17 00:00:00 2001
From: Remotely Chaotic <jtek.fdlt@gmail.com>
Date: Thu, 21 Oct 2021 09:20:46 +0200
Subject: [PATCH 1/2] Made RCCFileInfo and RCCResourceLibrary::addFile publicly
 accessible

---
 src/RCC/main.cpp |  2 +-
 src/RCC/rcc.cpp  | 64 ++-----------------------------------------
 src/RCC/rcc.h    | 70 +++++++++++++++++++++++++++++++++++++++++++++---
 3 files changed, 70 insertions(+), 66 deletions(-)

diff --git a/src/RCC/main.cpp b/src/RCC/main.cpp
index 35b0a4b..74b4391 100644
--- a/src/RCC/main.cpp
+++ b/src/RCC/main.cpp
@@ -25,7 +25,7 @@
 **
 ** $QT_END_LICENSE$
 **
-** Adapted for the JOIP-Engine to handle PhysFs Files by RemotelyChaotic
+** 06.09:2021: Adapted for the JOIP-Engine to handle PhysFs Files by RemotelyChaotic
 ****************************************************************************/
 
 #include <rcc.h>
diff --git a/src/RCC/rcc.cpp b/src/RCC/rcc.cpp
index a58729c..5aa3796 100644
--- a/src/RCC/rcc.cpp
+++ b/src/RCC/rcc.cpp
@@ -25,6 +25,8 @@
 **
 ** $QT_END_LICENSE$
 **
+** 21.10.2021: Adapted for the JOIP-Engine so reosurce files can be built from in-memory
+**          ByteArrays
 ****************************************************************************/
 
 #include "rcc.h"
@@ -34,9 +36,7 @@
 #include <qdebug.h>
 #include <qdir.h>
 #include <qdiriterator.h>
-#include <qfile.h>
 #include <qiodevice.h>
-#include <qlocale.h>
 #include <qregexp.h>
 #include <qstack.h>
 #include <qxmlstream.h>
@@ -47,22 +47,6 @@
 
 QT_BEGIN_NAMESPACE
 
-enum {
-    CONSTANT_USENAMESPACE = 1,
-    CONSTANT_COMPRESSLEVEL_DEFAULT = -1,
-    CONSTANT_ZSTDCOMPRESSLEVEL_CHECK = 1,   // Zstd level to check if compressing is a good idea
-    CONSTANT_ZSTDCOMPRESSLEVEL_STORE = 14,  // Zstd level to actually store the data
-    CONSTANT_COMPRESSTHRESHOLD_DEFAULT = 70
-};
-
-#if QT_CONFIG(zstd) && QT_VERSION >= QT_VERSION_CHECK(6,0,0)
-#  define CONSTANT_COMPRESSALGO_DEFAULT     RCCResourceLibrary::CompressionAlgorithm::Zstd
-#elif !defined(QT_NO_COMPRESS)
-#  define CONSTANT_COMPRESSALGO_DEFAULT     RCCResourceLibrary::CompressionAlgorithm::Zlib
-#else
-#  define CONSTANT_COMPRESSALGO_DEFAULT     RCCResourceLibrary::CompressionAlgorithm::None
-#endif
-
 void RCCResourceLibrary::write(const char *str, int len)
 {
     int n = m_out.size();
@@ -91,50 +75,6 @@ static inline QString msgOpenReadFailed(const QString &fname, const QString &why
 //
 ///////////////////////////////////////////////////////////
 
-class RCCFileInfo
-{
-public:
-    enum Flags
-    {
-        // must match qresource.cpp
-        NoFlags = 0x00,
-        Compressed = 0x01,
-        Directory = 0x02,
-        CompressedZstd = 0x04
-    };
-
-    RCCFileInfo(const QString &name = QString(), const QFileInfo &fileInfo = QFileInfo(),
-                QLocale::Language language = QLocale::C,
-                QLocale::Country country = QLocale::AnyCountry,
-                uint flags = NoFlags,
-                RCCResourceLibrary::CompressionAlgorithm compressAlgo = CONSTANT_COMPRESSALGO_DEFAULT,
-                int compressLevel = CONSTANT_COMPRESSLEVEL_DEFAULT,
-                int compressThreshold = CONSTANT_COMPRESSTHRESHOLD_DEFAULT);
-    ~RCCFileInfo();
-
-    QString resourceName() const;
-
-public:
-    qint64 writeDataBlob(RCCResourceLibrary &lib, qint64 offset, QString *errorMessage);
-    qint64 writeDataName(RCCResourceLibrary &, qint64 offset);
-    void writeDataInfo(RCCResourceLibrary &lib);
-
-    int m_flags;
-    QString m_name;
-    QLocale::Language m_language;
-    QLocale::Country m_country;
-    QFileInfo m_fileInfo;
-    RCCFileInfo *m_parent;
-    QHash<QString, RCCFileInfo*> m_children;
-    RCCResourceLibrary::CompressionAlgorithm m_compressAlgo;
-    int m_compressLevel;
-    int m_compressThreshold;
-
-    qint64 m_nameOffset;
-    qint64 m_dataOffset;
-    qint64 m_childOffset;
-};
-
 RCCFileInfo::RCCFileInfo(const QString &name, const QFileInfo &fileInfo,
     QLocale::Language language, QLocale::Country country, uint flags,
     RCCResourceLibrary::CompressionAlgorithm compressAlgo, int compressLevel, int compressThreshold)
diff --git a/src/RCC/rcc.h b/src/RCC/rcc.h
index 190c37a..a4aa574 100644
--- a/src/RCC/rcc.h
+++ b/src/RCC/rcc.h
@@ -25,6 +25,8 @@
 **
 ** $QT_END_LICENSE$
 **
+** 21.10.2021: Adapted for the JOIP-Engine so reosurce files can be built from in-memory
+**             ByteArrays
 ****************************************************************************/
 
 // Note: A copy of this file is used in Qt Designer (qttools/src/designer/src/lib/shared/rcc_p.h)
@@ -33,6 +35,8 @@
 #define RCC_H
 
 #include <qstringlist.h>
+#include <qfileinfo.h>
+#include <qlocale.h>
 #include <qhash.h>
 #include <qstring.h>
 
@@ -40,10 +44,17 @@ typedef struct ZSTD_CCtx_s ZSTD_CCtx;
 
 QT_BEGIN_NAMESPACE
 
-class RCCFileInfo;
+#if QT_CONFIG(zstd) && QT_VERSION >= QT_VERSION_CHECK(6,0,0)
+#  define CONSTANT_COMPRESSALGO_DEFAULT     RCCResourceLibrary::CompressionAlgorithm::Zstd
+#elif !defined(QT_NO_COMPRESS)
+#  define CONSTANT_COMPRESSALGO_DEFAULT     RCCResourceLibrary::CompressionAlgorithm::Zlib
+#else
+#  define CONSTANT_COMPRESSALGO_DEFAULT     RCCResourceLibrary::CompressionAlgorithm::None
+#endif
+
 class QIODevice;
 class QTextStream;
-
+class RCCFileInfo;
 
 class RCCResourceLibrary
 {
@@ -51,6 +62,14 @@ class RCCResourceLibrary
     RCCResourceLibrary &operator=(const RCCResourceLibrary &);
 
 public:
+    enum {
+        CONSTANT_USENAMESPACE = 1,
+        CONSTANT_COMPRESSLEVEL_DEFAULT = -1,
+        CONSTANT_ZSTDCOMPRESSLEVEL_CHECK = 1,   // Zstd level to check if compressing is a good idea
+        CONSTANT_ZSTDCOMPRESSLEVEL_STORE = 14,  // Zstd level to actually store the data
+        CONSTANT_COMPRESSTHRESHOLD_DEFAULT = 70
+    };
+
     RCCResourceLibrary(quint8 formatVersion);
     ~RCCResourceLibrary();
 
@@ -109,6 +128,7 @@ public:
 
     int formatVersion() const { return m_formatVersion; }
 
+    bool addFile(const QString &alias, const RCCFileInfo &file);
 private:
     struct Strings {
         Strings();
@@ -124,7 +144,6 @@ private:
     };
     friend class RCCFileInfo;
     void reset();
-    bool addFile(const QString &alias, const RCCFileInfo &file);
     bool interpretResourceFile(QIODevice *inputDevice, const QString &file,
         QString currentPath = QString(), bool listMode = false);
     bool writeHeader();
@@ -172,6 +191,51 @@ private:
     quint8 m_formatVersion;
 };
 
+
+class RCCFileInfo
+{
+public:
+    enum Flags
+    {
+        // must match qresource.cpp
+        NoFlags = 0x00,
+        Compressed = 0x01,
+        Directory = 0x02,
+        CompressedZstd = 0x04
+    };
+
+    RCCFileInfo(const QString &name = QString(), const QFileInfo &fileInfo = QFileInfo(),
+                QLocale::Language language = QLocale::C,
+                QLocale::Country country = QLocale::AnyCountry,
+                uint flags = NoFlags,
+                RCCResourceLibrary::CompressionAlgorithm compressAlgo = RCCResourceLibrary::CONSTANT_COMPRESSALGO_DEFAULT,
+                int compressLevel = RCCResourceLibrary::CONSTANT_COMPRESSLEVEL_DEFAULT,
+                int compressThreshold = RCCResourceLibrary::CONSTANT_COMPRESSTHRESHOLD_DEFAULT);
+    ~RCCFileInfo();
+
+    QString resourceName() const;
+
+public:
+    qint64 writeDataBlob(RCCResourceLibrary &lib, qint64 offset, QString *errorMessage);
+    qint64 writeDataName(RCCResourceLibrary &, qint64 offset);
+    void writeDataInfo(RCCResourceLibrary &lib);
+
+    int m_flags;
+    QString m_name;
+    QLocale::Language m_language;
+    QLocale::Country m_country;
+    QFileInfo m_fileInfo;
+    RCCFileInfo *m_parent;
+    QHash<QString, RCCFileInfo*> m_children;
+    RCCResourceLibrary::CompressionAlgorithm m_compressAlgo;
+    int m_compressLevel;
+    int m_compressThreshold;
+
+    qint64 m_nameOffset;
+    qint64 m_dataOffset;
+    qint64 m_childOffset;
+};
+
 QT_END_NAMESPACE
 
 #endif // RCC_H
-- 
2.24.0.windows.2

