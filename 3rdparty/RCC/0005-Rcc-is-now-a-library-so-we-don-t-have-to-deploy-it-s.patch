From 4220697865fb496fb92a6c8d7beffd15c9148829 Mon Sep 17 00:00:00 2001
From: RemotelyChaotic <jtek.fdlt+smut@gmail.com>
Date: Wed, 26 Mar 2025 17:31:36 +0100
Subject: [PATCH] Rcc is now a library, so we don't have to deploy it
 separately

---
 src/RCC/CMakeLists.txt               |  43 +++---
 src/RCC/rcc.cpp                      |  51 +++----
 src/RCC/rcc.h                        |  28 ++--
 src/RCC/rcc_options.h                |  66 +++++++++
 src/RCC/{main.cpp => rcc_runner.cpp} | 195 ++++++---------------------
 src/RCC/rcc_runner.h                 |  16 +++
 6 files changed, 177 insertions(+), 222 deletions(-)
 create mode 100644 src/RCC/rcc_options.h
 rename src/RCC/{main.cpp => rcc_runner.cpp} (56%)
 create mode 100644 src/RCC/rcc_runner.h

diff --git a/src/RCC/CMakeLists.txt b/src/RCC/CMakeLists.txt
index 6f92eda..aaf79e5 100644
--- a/src/RCC/CMakeLists.txt
+++ b/src/RCC/CMakeLists.txt
@@ -1,6 +1,6 @@
 cmake_minimum_required(VERSION 3.5)
 
-project(rcc LANGUAGES CXX)
+project(Rcc_static LANGUAGES CXX)
 
 include(JOIPCommon)
 
@@ -10,24 +10,26 @@ find_package(Qt5 COMPONENTS
   REQUIRED)
 
 set(Sources
-  main.cpp
   rcc.cpp
   rcc.h
-  ../Systems/PhysFs/PhysFsFileEngine.cpp
-  ../Systems/PhysFs/PhysFsFileEngine.h
-  ../Utils/RaiiFunctionCaller.cpp
-  ../Utils/RaiiFunctionCaller.h)
+  rcc_options.h
+  rcc_runner.cpp
+  rcc_runner.h
+)
 
-add_executable(${PROJECT_NAME} ${Sources})
+add_library(${PROJECT_NAME} STATIC ${Sources})
+add_library(Qt::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
 if (WIN32)
   set_target_properties(${PROJECT_NAME} PROPERTIES
-    MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>"
-    LINK_FLAGS /SUBSYSTEM:CONSOLE)
+    MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
 endif()
 
 # TODO: not used in default build of Qt 5.14.2
 target_compile_definitions(${PROJECT_NAME} PRIVATE QT_FEATURE_zstd=-1)
 
+include(GenerateExportHeader)
+generate_export_header(${PROJECT_NAME} BASE_NAME ${PROJECT_NAME})
+
 #-----------------------------------------------------------------------------------------
 # Libs
 #-----------------------------------------------------------------------------------------
@@ -35,14 +37,14 @@ target_link_libraries(${PROJECT_NAME}
   PRIVATE
     Qt5::Core
     Qt5::Xml
-    physfs-static)
+  )
 
 target_include_directories(${PROJECT_NAME}
+  PUBLIC
+    ${CMAKE_CURRENT_SOURCE_DIR}
   PRIVATE
-  ${CMAKE_CURRENT_SOURCE_DIR}/../Systems/PhysFs
-  ${CMAKE_CURRENT_SOURCE_DIR}/../Utils
-  ${Qt5Core_PRIVATE_INCLUDE_DIRS}
-  ${PhysicsFS_INCLUDE_DIRS}
+    ${Qt5Core_PRIVATE_INCLUDE_DIRS}
+    ${PhysicsFS_INCLUDE_DIRS}
   )
 
 #-----------------------------------------------------------------------------------------
@@ -92,16 +94,3 @@ configure_file_generate(
   "${CMAKE_SOURCE_DIR}/version.h.in"
   "${CMAKE_CURRENT_BINARY_DIR}/out_Version.h"
 )
-
-#-----------------------------------------------------------------------------------------
-# install
-#-----------------------------------------------------------------------------------------
-if (LINUX)
-  install(
-    TARGETS ${PROJECT_NAME}
-    DESTINATION "${CMAKE_INSTALL_PREFIX}/AppDir/usr/bin")
-else()
-  install(
-    TARGETS ${PROJECT_NAME}
-    DESTINATION "${CMAKE_INSTALL_PREFIX}/bin")
-endif()
diff --git a/src/RCC/rcc.cpp b/src/RCC/rcc.cpp
index dca324b..16f2dec 100644
--- a/src/RCC/rcc.cpp
+++ b/src/RCC/rcc.cpp
@@ -79,7 +79,7 @@ static inline QString msgOpenReadFailed(const QString &fname, const QString &why
 
 RCCFileInfo::RCCFileInfo(const QString &name, const QFileInfo &fileInfo,
     QLocale::Language language, QLocale::Country country, uint flags,
-    RCCResourceLibrary::CompressionAlgorithm compressAlgo, int compressLevel, int compressThreshold)
+    CompressionAlgorithm compressAlgo, int compressLevel, int compressThreshold)
 {
     m_name = name;
     m_fileInfo = fileInfo;
@@ -210,11 +210,11 @@ qint64 RCCFileInfo::writeDataBlob(RCCResourceLibrary &lib, qint64 offset,
     // Check if compression is useful for this file
     if (data.size() != 0) {
 #if QT_CONFIG(zstd)
-        if (m_compressAlgo == RCCResourceLibrary::CompressionAlgorithm::Best) {
-            m_compressAlgo = RCCResourceLibrary::CompressionAlgorithm::Zstd;
+        if (m_compressAlgo == CompressionAlgorithm::Best) {
+            m_compressAlgo = CompressionAlgorithm::Zstd;
             m_compressLevel = 19;   // not ZSTD_maxCLevel(), as 20+ are experimental
         }
-        if (m_compressAlgo == RCCResourceLibrary::CompressionAlgorithm::Zstd) {
+        if (m_compressAlgo == CompressionAlgorithm::Zstd) {
             if (lib.m_zstdCCtx == nullptr)
                 lib.m_zstdCCtx = ZSTD_createCCtx();
             qsizetype size = data.size();
@@ -258,11 +258,11 @@ qint64 RCCFileInfo::writeDataBlob(RCCResourceLibrary &lib, qint64 offset,
         }
 #endif
 #ifndef QT_NO_COMPRESS
-        if (m_compressAlgo == RCCResourceLibrary::CompressionAlgorithm::Best) {
-            m_compressAlgo = RCCResourceLibrary::CompressionAlgorithm::Zlib;
+        if (m_compressAlgo == CompressionAlgorithm::Best) {
+            m_compressAlgo = CompressionAlgorithm::Zlib;
             m_compressLevel = 9;
         }
-        if (m_compressAlgo == RCCResourceLibrary::CompressionAlgorithm::Zlib) {
+        if (m_compressAlgo == CompressionAlgorithm::Zlib) {
             QByteArray compressed =
                     qCompress(reinterpret_cast<uchar *>(data.data()), data.size(), m_compressLevel);
 
@@ -804,7 +804,7 @@ RCCResourceLibrary::ResourceDataFileMap RCCResourceLibrary::resourceDataFileMap(
     return rc;
 }
 
-RCCResourceLibrary::CompressionAlgorithm RCCResourceLibrary::parseCompressionAlgorithm(QStringView value, QString *errorMsg)
+CompressionAlgorithm RCCResourceLibrary::parseCompressionAlgorithm(QStringView value, QString *errorMsg)
 {
     if (value == QLatin1String("best"))
         return CompressionAlgorithm::Best;
@@ -829,24 +829,27 @@ RCCResourceLibrary::CompressionAlgorithm RCCResourceLibrary::parseCompressionAlg
 
 int RCCResourceLibrary::parseCompressionLevel(CompressionAlgorithm algo, const QString &level, QString *errorMsg)
 {
-    bool ok;
-    int c = level.toInt(&ok);
-    if (ok) {
-        switch (algo) {
-        case CompressionAlgorithm::None:
-        case CompressionAlgorithm::Best:
-            return 0;
-        case CompressionAlgorithm::Zlib:
-            if (c >= 1 && c <= 9)
-                return c;
-            break;
-        case CompressionAlgorithm::Zstd:
+  bool ok;
+  int c = level.toInt(&ok);
+  return parseCompressionLevel(algo, c, errorMsg);
+}
+
+int RCCResourceLibrary::parseCompressionLevel(CompressionAlgorithm algo, const qint32 &level, QString *errorMsg)
+{
+    switch (algo) {
+    case CompressionAlgorithm::None:
+    case CompressionAlgorithm::Best:
+        return 0;
+    case CompressionAlgorithm::Zlib:
+        if (level >= 1 && level <= 9)
+            return level;
+        break;
+    case CompressionAlgorithm::Zstd:
 #if QT_CONFIG(zstd)
-            if (c >= 0 && c <= ZSTD_maxCLevel())
-                return c;
+    if (level >= 0 && level <= ZSTD_maxCLevel())
+        return level;
 #endif
-            break;
-        }
+        break;
     }
 
     *errorMsg = QString::fromLatin1("invalid compression level '%1'").arg(level);
diff --git a/src/RCC/rcc.h b/src/RCC/rcc.h
index a0fb0f9..206bc35 100644
--- a/src/RCC/rcc.h
+++ b/src/RCC/rcc.h
@@ -34,6 +34,9 @@
 #ifndef RCC_H
 #define RCC_H
 
+#include "rcc_static_export.h"
+#include "rcc_options.h"
+
 #include <qstringlist.h>
 #include <qfileinfo.h>
 #include <qlocale.h>
@@ -44,19 +47,21 @@ typedef struct ZSTD_CCtx_s ZSTD_CCtx;
 
 QT_BEGIN_NAMESPACE
 
+using namespace QRcc;
+
 #if QT_CONFIG(zstd) && QT_VERSION >= QT_VERSION_CHECK(6,0,0)
-#  define CONSTANT_COMPRESSALGO_DEFAULT     RCCResourceLibrary::CompressionAlgorithm::Zstd
+#  define CONSTANT_COMPRESSALGO_DEFAULT     CompressionAlgorithm::Zstd
 #elif !defined(QT_NO_COMPRESS)
-#  define CONSTANT_COMPRESSALGO_DEFAULT     RCCResourceLibrary::CompressionAlgorithm::Zlib
+#  define CONSTANT_COMPRESSALGO_DEFAULT     CompressionAlgorithm::Zlib
 #else
-#  define CONSTANT_COMPRESSALGO_DEFAULT     RCCResourceLibrary::CompressionAlgorithm::None
+#  define CONSTANT_COMPRESSALGO_DEFAULT     CompressionAlgorithm::None
 #endif
 
 class QIODevice;
 class QTextStream;
 class RCCFileInfo;
 
-class RCCResourceLibrary
+class RCC_STATIC_EXPORT RCCResourceLibrary
 {
     RCCResourceLibrary(const RCCResourceLibrary &);
     RCCResourceLibrary &operator=(const RCCResourceLibrary &);
@@ -99,19 +104,12 @@ public:
     void setOutputName(const QString &name) { m_outputName = name; }
     QString outputName() const { return m_outputName; }
 
-    enum class CompressionAlgorithm {
-        Zlib,
-        Zstd,
-
-        Best = 99,
-        None = -1
-    };
-
     static CompressionAlgorithm parseCompressionAlgorithm(QStringView algo, QString *errorMsg);
     void setCompressionAlgorithm(CompressionAlgorithm algo) { m_compressionAlgo = algo; }
     CompressionAlgorithm compressionAlgorithm() const { return m_compressionAlgo; }
 
     static int parseCompressionLevel(CompressionAlgorithm algo, const QString &level, QString *errorMsg);
+    static int parseCompressionLevel(CompressionAlgorithm algo, const qint32 &level, QString *errorMsg);
     void setCompressLevel(int c) { m_compressLevel = c; }
     int compressLevel() const { return m_compressLevel; }
 
@@ -192,7 +190,7 @@ private:
 };
 
 
-class RCCFileInfo
+class RCC_STATIC_EXPORT RCCFileInfo
 {
 public:
     enum Flags
@@ -208,7 +206,7 @@ public:
                 QLocale::Language language = QLocale::C,
                 QLocale::Country country = QLocale::AnyCountry,
                 uint flags = NoFlags,
-                RCCResourceLibrary::CompressionAlgorithm compressAlgo = RCCResourceLibrary::CONSTANT_COMPRESSALGO_DEFAULT,
+                CompressionAlgorithm compressAlgo = CONSTANT_COMPRESSALGO_DEFAULT,
                 int compressLevel = RCCResourceLibrary::CONSTANT_COMPRESSLEVEL_DEFAULT,
                 int compressThreshold = RCCResourceLibrary::CONSTANT_COMPRESSTHRESHOLD_DEFAULT);
     ~RCCFileInfo();
@@ -228,7 +226,7 @@ public:
     QByteArray m_prefilledContent;
     RCCFileInfo *m_parent;
     QHash<QString, RCCFileInfo*> m_children;
-    RCCResourceLibrary::CompressionAlgorithm m_compressAlgo;
+    CompressionAlgorithm m_compressAlgo;
     int m_compressLevel;
     int m_compressThreshold;
 
diff --git a/src/RCC/rcc_options.h b/src/RCC/rcc_options.h
new file mode 100644
index 0000000..32772fd
--- /dev/null
+++ b/src/RCC/rcc_options.h
@@ -0,0 +1,66 @@
+#ifndef RCC_OPTIONS_H
+#define RCC_OPTIONS_H
+
+#include <QString>
+#include <QStringList>
+#include <optional>
+#include <variant>
+
+QT_BEGIN_NAMESPACE
+
+namespace QRcc
+{
+
+// #if QT_CONFIG(zstd) && !defined(QT_NO_COMPRESS)
+// #  define ALGOS     "[zstd], zlib, none"
+// #elif QT_CONFIG(zstd)
+// #  define ALGOS     "[zstd], none"
+// #elif !defined(QT_NO_COMPRESS)
+// #  define ALGOS     "[zlib], none"
+// #else
+// #  define ALGOS     "[none]"
+// #endif
+enum class CompressionAlgorithm
+{
+  Zlib,
+  Zstd,
+
+  Best = 99,
+  None = -1
+};
+
+enum class PassFormat
+{
+  Pass1,
+  Pass2
+};
+
+struct SRCCOptions
+{
+  std::optional<QString> outputOption; // Write output to <file> rather than stdout.
+  std::optional<QString> tempOption; // Use temporary <file> for big resources.
+  std::optional<QString> nameOption; // Create an external initialization function with <name>.
+  std::optional<QString> rootOption; // Prefix resource access path with root path.
+  // Compress input files using algorithm <algo> (" ALGOS ").
+  // And Compress input files by <level>.
+  // Or Disable all compression. Same as --compress-algo=none.
+  std::variant<std::pair<CompressionAlgorithm, qint32>, std::nullopt_t> compressionOption;
+  std::optional<qint32> thresholdOption; // Threshold to consider compressing files.
+  std::optional<qint32> binaryOption; // Output a binary file for use as a dynamic resource.
+  std::optional<QString> generatorOption; // Select generator: cpp|python|python2
+  std::optional<PassFormat> passOption; // Pass number for big resources
+  bool namespaceOption = false; // Turn off namespace macros.
+  bool verboseOption = false; // Enable verbose mode.
+  bool listOption = false; // Only list .qrc file entries, do not generate code.
+  bool mapOption = false; // Only output a mapping of resource paths to file system paths defined in the .qrc file, do not generate code.
+  std::optional<QString> depFileOption; // Write a depfile with the .qrc dependencies to <file>.
+  bool projectOption = false; // Output a resource file containing all files from the current directory.
+  std::optional<qint32> formatVersionOption; // The RCC format version to write
+  QStringList filenamesIn; // Input files (*.qrc).
+};
+
+}
+
+QT_END_NAMESPACE
+
+#endif // RCC_OPTIONS_H
diff --git a/src/RCC/main.cpp b/src/RCC/rcc_runner.cpp
similarity index 56%
rename from src/RCC/main.cpp
rename to src/RCC/rcc_runner.cpp
index 74b4391..414ee3e 100644
--- a/src/RCC/main.cpp
+++ b/src/RCC/rcc_runner.cpp
@@ -28,9 +28,8 @@
 ** 06.09:2021: Adapted for the JOIP-Engine to handle PhysFs Files by RemotelyChaotic
 ****************************************************************************/
 
+#include <rcc_runner.h>
 #include <rcc.h>
-#include "PhysFsFileEngine.h"
-#include "RaiiFunctionCaller.h"
 
 #include <qdebug.h>
 #include <qdir.h>
@@ -52,6 +51,9 @@
 
 QT_BEGIN_NAMESPACE
 
+namespace QRcc
+{
+
 void dumpRecursive(const QDir &dir, QTextStream &out)
 {
     const QFileInfoList entries = dir.entryInfoList(QDir::Files | QDir::Dirs | QDir::NoDotAndDotDot
@@ -133,105 +135,14 @@ void writeDepFile(QIODevice &iodev, const QStringList &depsList, const QString &
     out << QLatin1Char('\n');
 }
 
-int runRcc(int argc, char *argv[])
+int runRcc(SRCCOptions opts)
 {
-    QCoreApplication app(argc, argv);
-    QCoreApplication::setApplicationVersion(QStringLiteral(QT_VERSION_STR));
-
-    // Note that rcc isn't translated.
-    // If you use this code as an example for a translated app, make sure to translate the strings.
-    QCommandLineParser parser;
-    parser.setSingleDashWordOptionMode(QCommandLineParser::ParseAsLongOptions);
-    parser.setApplicationDescription(QLatin1String("Qt Resource Compiler version " QT_VERSION_STR));
-    parser.addHelpOption();
-    parser.addVersionOption();
-
-    QCommandLineOption outputOption(QStringList() << QStringLiteral("o") << QStringLiteral("output"));
-    outputOption.setDescription(QStringLiteral("Write output to <file> rather than stdout."));
-    outputOption.setValueName(QStringLiteral("file"));
-    parser.addOption(outputOption);
-
-    QCommandLineOption tempOption(QStringList() << QStringLiteral("t") << QStringLiteral("temp"));
-    tempOption.setDescription(QStringLiteral("Use temporary <file> for big resources."));
-    tempOption.setValueName(QStringLiteral("file"));
-    parser.addOption(tempOption);
-
-    QCommandLineOption nameOption(QStringLiteral("name"), QStringLiteral("Create an external initialization function with <name>."), QStringLiteral("name"));
-    parser.addOption(nameOption);
-
-    QCommandLineOption rootOption(QStringLiteral("root"), QStringLiteral("Prefix resource access path with root path."), QStringLiteral("path"));
-    parser.addOption(rootOption);
-
-#if QT_CONFIG(zstd) && !defined(QT_NO_COMPRESS)
-#  define ALGOS     "[zstd], zlib, none"
-#elif QT_CONFIG(zstd)
-#  define ALGOS     "[zstd], none"
-#elif !defined(QT_NO_COMPRESS)
-#  define ALGOS     "[zlib], none"
-#else
-#  define ALGOS     "[none]"
-#endif
-    const QString &algoDescription =
-            QStringLiteral("Compress input files using algorithm <algo> (" ALGOS ").");
-    QCommandLineOption compressionAlgoOption(QStringLiteral("compress-algo"), algoDescription, QStringLiteral("algo"));
-    parser.addOption(compressionAlgoOption);
-#undef ALGOS
-
-    QCommandLineOption compressOption(QStringLiteral("compress"), QStringLiteral("Compress input files by <level>."), QStringLiteral("level"));
-    parser.addOption(compressOption);
-
-    QCommandLineOption nocompressOption(QStringLiteral("no-compress"), QStringLiteral("Disable all compression. Same as --compress-algo=none."));
-    parser.addOption(nocompressOption);
-
-    QCommandLineOption thresholdOption(QStringLiteral("threshold"), QStringLiteral("Threshold to consider compressing files."), QStringLiteral("level"));
-    parser.addOption(thresholdOption);
-
-    QCommandLineOption binaryOption(QStringLiteral("binary"), QStringLiteral("Output a binary file for use as a dynamic resource."));
-    parser.addOption(binaryOption);
-
-    QCommandLineOption generatorOption(QStringList{QStringLiteral("g"), QStringLiteral("generator")});
-    generatorOption.setDescription(QStringLiteral("Select generator."));
-    generatorOption.setValueName(QStringLiteral("cpp|python|python2"));
-    parser.addOption(generatorOption);
-
-    QCommandLineOption passOption(QStringLiteral("pass"), QStringLiteral("Pass number for big resources"), QStringLiteral("number"));
-    parser.addOption(passOption);
-
-    QCommandLineOption namespaceOption(QStringLiteral("namespace"), QStringLiteral("Turn off namespace macros."));
-    parser.addOption(namespaceOption);
-
-    QCommandLineOption verboseOption(QStringLiteral("verbose"), QStringLiteral("Enable verbose mode."));
-    parser.addOption(verboseOption);
-
-    QCommandLineOption listOption(QStringLiteral("list"), QStringLiteral("Only list .qrc file entries, do not generate code."));
-    parser.addOption(listOption);
-
-    QCommandLineOption mapOption(QStringLiteral("list-mapping"),
-                                 QStringLiteral("Only output a mapping of resource paths to file system paths defined in the .qrc file, do not generate code."));
-    parser.addOption(mapOption);
-
-    QCommandLineOption depFileOption(QStringList{QStringLiteral("d"), QStringLiteral("depfile")},
-                                     QStringLiteral("Write a depfile with the .qrc dependencies to <file>."), QStringLiteral("file"));
-    parser.addOption(depFileOption);
-
-    QCommandLineOption projectOption(QStringLiteral("project"), QStringLiteral("Output a resource file containing all files from the current directory."));
-    parser.addOption(projectOption);
-
-    QCommandLineOption formatVersionOption(QStringLiteral("format-version"), QStringLiteral("The RCC format version to write"), QStringLiteral("number"));
-    parser.addOption(formatVersionOption);
-
-    parser.addPositionalArgument(QStringLiteral("inputs"), QStringLiteral("Input files (*.qrc)."));
-
-
-    //parse options
-    parser.process(app);
-
     QString errorMsg;
 
     quint8 formatVersion = 3;
-    if (parser.isSet(formatVersionOption)) {
+    if (opts.formatVersionOption.has_value()) {
         bool ok = false;
-        formatVersion = parser.value(formatVersionOption).toUInt(&ok);
+        formatVersion = opts.formatVersionOption.value();
         if (!ok) {
             errorMsg = QLatin1String("Invalid format version specified");
         } else if (formatVersion < 1 || formatVersion > 3) {
@@ -240,31 +151,31 @@ int runRcc(int argc, char *argv[])
     }
 
     RCCResourceLibrary library(formatVersion);
-    if (parser.isSet(nameOption))
-        library.setInitName(parser.value(nameOption));
-    if (parser.isSet(rootOption)) {
-        library.setResourceRoot(QDir::cleanPath(parser.value(rootOption)));
+    if (opts.nameOption.has_value())
+        library.setInitName(opts.nameOption.value());
+    if (opts.rootOption.has_value()) {
+        library.setResourceRoot(QDir::cleanPath(opts.rootOption.value()));
         if (library.resourceRoot().isEmpty()
                 || library.resourceRoot().at(0) != QLatin1Char('/'))
             errorMsg = QLatin1String("Root must start with a /");
     }
 
-    if (parser.isSet(compressionAlgoOption))
-        library.setCompressionAlgorithm(RCCResourceLibrary::parseCompressionAlgorithm(parser.value(compressionAlgoOption), &errorMsg));
-    if (formatVersion < 3 && library.compressionAlgorithm() == RCCResourceLibrary::CompressionAlgorithm::Zstd)
+    if (std::holds_alternative<std::pair<CompressionAlgorithm, qint32>>(opts.compressionOption))
+        library.setCompressionAlgorithm(std::get<std::pair<CompressionAlgorithm, qint32>>(opts.compressionOption).first);
+    if (formatVersion < 3 && library.compressionAlgorithm() == CompressionAlgorithm::Zstd)
         errorMsg = QLatin1String("Zstandard compression requires format version 3 or higher");
-    if (parser.isSet(nocompressOption))
-        library.setCompressionAlgorithm(RCCResourceLibrary::CompressionAlgorithm::None);
-    if (parser.isSet(compressOption) && errorMsg.isEmpty()) {
-        int level = library.parseCompressionLevel(library.compressionAlgorithm(), parser.value(compressOption), &errorMsg);
+    if (std::holds_alternative<std::nullopt_t>(opts.compressionOption))
+        library.setCompressionAlgorithm(CompressionAlgorithm::None);
+    if (std::holds_alternative<std::pair<CompressionAlgorithm, qint32>>(opts.compressionOption)) {
+        int level = library.parseCompressionLevel(library.compressionAlgorithm(), std::get<std::pair<CompressionAlgorithm, qint32>>(opts.compressionOption).second, &errorMsg);
         library.setCompressLevel(level);
     }
-    if (parser.isSet(thresholdOption))
-        library.setCompressThreshold(parser.value(thresholdOption).toInt());
-    if (parser.isSet(binaryOption))
+    if (opts.thresholdOption.has_value())
+        library.setCompressThreshold(opts.thresholdOption.value());
+    if (opts.binaryOption.has_value())
         library.setFormat(RCCResourceLibrary::Binary);
-    if (parser.isSet(generatorOption)) {
-        auto value = parser.value(generatorOption);
+    if (opts.generatorOption.has_value()) {
+        auto value = opts.generatorOption.value();
         if (value == QLatin1String("cpp"))
             library.setFormat(RCCResourceLibrary::C_Code);
         else if (value == QLatin1String("python"))
@@ -275,45 +186,36 @@ int runRcc(int argc, char *argv[])
             errorMsg = QLatin1String("Invalid generator: ") + value;
     }
 
-    if (parser.isSet(passOption)) {
-        if (parser.value(passOption) == QLatin1String("1"))
+    if (opts.passOption.has_value()) {
+        if (opts.passOption.value() == PassFormat::Pass1)
             library.setFormat(RCCResourceLibrary::Pass1);
-        else if (parser.value(passOption) == QLatin1String("2"))
+        else if (opts.passOption.value() == PassFormat::Pass2)
             library.setFormat(RCCResourceLibrary::Pass2);
         else
             errorMsg = QLatin1String("Pass number must be 1 or 2");
     }
-    if (parser.isSet(namespaceOption))
+    if (opts.namespaceOption)
         library.setUseNameSpace(!library.useNameSpace());
-    if (parser.isSet(verboseOption))
+    if (opts.verboseOption)
         library.setVerbose(true);
 
-    const bool list = parser.isSet(listOption);
-    const bool map = parser.isSet(mapOption);
-    const bool projectRequested = parser.isSet(projectOption);
-    const QStringList filenamesIn = parser.positionalArguments();
+    const bool list = opts.listOption;
+    const bool map = opts.mapOption;
+    const bool projectRequested = opts.projectOption;
+    const QStringList filenamesIn = opts.filenamesIn;
 
     for (const QString &file : filenamesIn) {
         if (file == QLatin1String("-"))
             continue;
         else if (!QFile::exists(file)) {
-            qWarning("%s: File does not exist '%s'", argv[0], qPrintable(file));
+            qWarning("RCC: File does not exist '%s'", qPrintable(file));
             return 1;
         }
-        else {
-          CPhysFsFileEngine::mount(QFileInfo(file).absolutePath().toStdString().data(), nullptr);
-        }
     }
 
-    CRaiiFunctionCaller raiiFnCaller([filenamesIn]() {
-      for (const QString &file : filenamesIn) {
-        CPhysFsFileEngine::unmount(QFileInfo(file).absolutePath().toStdString().data());
-      }
-    });
-
-    QString outFilename = parser.value(outputOption);
-    QString tempFilename = parser.value(tempOption);
-    QString depFilename = parser.value(depFileOption);
+    QString outFilename = opts.outputOption.value_or(QString());
+    QString tempFilename = opts.tempOption.value_or(QString());
+    QString depFilename = opts.depFileOption.value_or(QString());
 
     if (projectRequested) {
         return createProject(outFilename);
@@ -323,8 +225,7 @@ int runRcc(int argc, char *argv[])
         errorMsg = QStringLiteral("No input files specified.");
 
     if (!errorMsg.isEmpty()) {
-        fprintf(stderr, "%s: %s\n", argv[0], qPrintable(errorMsg));
-        parser.showHelp(1);
+        fprintf(stderr, "RCC: %s\n", qPrintable(errorMsg));
         return 1;
     }
     QFile errorDevice;
@@ -441,24 +342,6 @@ int runRcc(int argc, char *argv[])
     return 0;
 }
 
-QT_END_NAMESPACE
-
-int main(int argc, char *argv[])
-{
-    // rcc uses a QHash to store files in the resource system.
-    // we must force a certain hash order when testing or tst_rcc will fail, see QTBUG-25078
-    if (Q_UNLIKELY(!qEnvironmentVariableIsEmpty("QT_RCC_TEST"))) {
-        qSetGlobalQHashSeed(0);
-        if (qGlobalQHashSeed() != 0)
-            qFatal("Cannot force QHash seed for testing as requested");
-    }
-
-    CPhysFsFileEngine::init(argv[0]);
-    CPhysFsFileEngineHandler engine;
-    Q_UNUSED(engine)
-
-    qint32 iRetVal = QT_PREPEND_NAMESPACE(runRcc)(argc, argv);
-
-    CPhysFsFileEngine::deInit();
-    return iRetVal;
 }
+
+QT_END_NAMESPACE
diff --git a/src/RCC/rcc_runner.h b/src/RCC/rcc_runner.h
new file mode 100644
index 0000000..96afb20
--- /dev/null
+++ b/src/RCC/rcc_runner.h
@@ -0,0 +1,16 @@
+#ifndef RCC_RUNNER_H
+#define RCC_RUNNER_H
+
+#include "rcc_static_export.h"
+#include <rcc_options.h>
+
+QT_BEGIN_NAMESPACE
+
+namespace QRcc
+{
+  int RCC_STATIC_EXPORT runRcc(SRCCOptions opts);
+}
+
+QT_END_NAMESPACE
+
+#endif // RCC_RUNNER_H
-- 
2.24.0.windows.2

